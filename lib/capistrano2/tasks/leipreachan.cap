Capistrano::Configuration.instance(:must_exist).load do
  namespace :deploy do
    set :folder, fetch(:backups_folder, '../../shared/backups')
    namespace :leipreachan do
      desc "Backup database"
      task :backup, role: :app do
        run "cd #{releases_path}/#{latest_revision} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:backup DIR=#{fetch(:folder)}"
        # within release_path do
        #   with rails_env: fetch(:rails_env) do
        #     execute :bundle, :exec, :rake, "leipreachan:backup DIR=#{fetch(:folder)}"
        #   end
        # end
      end
      desc "List of backups"
      task :list, role: :app do
        run "cd #{releases_path}/#{latest_revision} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:list DIR=#{fetch(:folder)}"

        # within current_path do
        #   with rails_env: fetch(:rails_env) do
        #     execute :bundle, :exec, :rake, "leipreachan:list DIR=#{fetch(:folder)}"
        #   end
        # end
      end
      desc "Restore database"
      task :restore, role: :app do
        puts "="*80
        puts "WARNING!!! YOUR CURRENT DATABASE DATA WILL BE LOST!!!"
        puts "Think twice before enter 'YES' and push the Enter button"
        puts "="*80
        set :answercheck, ask('"YES" for restore last backup of the database: ', 'No')
        run "cd #{releases_path}/#{latest_revision} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:restorelast DIR=#{fetch(:folder)}"

        # within current_path do
        #   with rails_env: fetch(:rails_env) do
        #     puts "="*80
        #     puts "WARNING!!! YOUR CURRENT DATABASE DATA WILL BE LOST!!!"
        #     puts "Think twice before enter 'YES' and push the Enter button"
        #     puts "="*80
        #     set :answercheck, ask('"YES" for restore last backup of the database: ', 'No')
        #     if fetch(:answercheck) == 'YES'
        #       execute :bundle, :exec, :rake, "leipreachan:restorelast DIR=#{fetch(:folder)}"
        #     end
        #   end
        # end
      end
    end
  end
end
