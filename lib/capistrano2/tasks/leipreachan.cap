Capistrano::Configuration.instance(:must_exist).load do
  namespace :deploy do
    set :folder, fetch(:backups_folder, '../../shared/backups')
    namespace :leipreachan do
      desc "Backup database"
      task :backup, role: :app do
        run "cd #{latest_release} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:backup DIR=#{fetch(:folder)}"
      end

      desc "List of backups"
      task :list, role: :app do
        set :date, ENV['DATE'].nil? ? '' : "DATE=#{ENV['DATE']}"
        run "cd #{latest_release} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:list DIR=#{fetch(:folder)} #{fetch(:date)}"
      end

      desc "Restore database"
      task :restore, role: :app do
        run "cd #{latest_release} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:list DIR=#{fetch(:folder)}"
        date = Capistrano::CLI.ui.ask('Please specify date (default: latest one)', nil)
        puts "Your choice: #{date.empty? ? 'Latest one' : date.strip}"

        unless date.empty?
          run "cd #{latest_release} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:list DIR=#{fetch(:folder)} DATE=#{date.strip}"
        end

        filename = Capistrano::CLI.ui.ask('Please specify filename for restore (default: latest one)', nil)
        puts "Your choice: #{filename.empty? ? 'Latest one' : filename.strip}"

        puts "="*80
        puts "WARNING!!! YOUR CURRENT DATABASE DATA WILL BE LOST!!!"
        puts "Think twice before enter 'YES' and push the Enter button"
        puts "="*80

        answercheck = Capistrano::CLI.ui.ask('"YES" for restore last backup of the database: ', nil)
        if answercheck == 'YES'
          filename = filename.empty? ? '' : "FILE=#{filename.strip}"
          date = date.empty? ? '' : "DATE=#{date.strip}"
          run "cd #{latest_release} && RAILS_ENV=#{fetch(:rails_env)} bundle exec rake leipreachan:restorefile DIR=#{fetch(:folder)} #{date} #{filename}"
        else
          puts "Incorrect Answer!!!"
        end
      end
    end
  end
end
